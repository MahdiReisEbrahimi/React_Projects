{"ast":null,"code":"var _jsxFileName = \"/home/mehdi/Project-6/my-app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport StudentCard from './StudentCards';\nimport React, { useState } from 'react';\n\n// User defined class node\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Node {\n  // constructor\n  constructor(element) {\n    this.element = element;\n    this.next = null;\n  }\n}\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.size = 0;\n  }\n\n  // functions to be implemented\n  // add(element)\n\n  // insertAt(element, location)\n  // removeFrom(location)\n  // removeElement(element)\n\n  // Helper Methods\n  // isEmpty\n  // size_Of_List\n  // PrintList\n}\nadd(element);\n{\n  // creates a new node\n  let node = new Node(element);\n\n  // to store current node\n  let current;\n\n  // if list is Empty add the\n  // element and make it head\n  if (this.head == null) this.head = node;else {\n    current = this.head;\n\n    // iterate to the end of the\n    // list\n    while (current.next) {\n      current = current.next;\n    }\n\n    // add node\n    current.next = node;\n  }\n  this.size++;\n}\nconst people = [{\n  name: 'Mahdi',\n  studentNum: \"401243051\",\n  userName‌: \"mm850\",\n  pass: 8596\n}, {\n  name: 'Fam',\n  studentNum: \"402258961\",\n  userName‌: \"mm350\",\n  pass: 1478\n}, {\n  name: 'Hadi',\n  studentNum: \"456256888\",\n  userName‌: \"mm350\",\n  pass: 1245\n}, {\n  name: 'Hadi',\n  studentNum: \"4566888\",\n  userName‌: \"mm350\",\n  pass: 1245\n}];\nfunction App() {\n  _s();\n  const [student, setStudent] = useState(people);\n  const StudentCardDeleteListener = enteredId => {\n    console.log(enteredId);\n    let indexWhichShouldBeDeleted = -1;\n    for (let i = 0; i < student.length; i++) {\n      if (student[i].studentNum == enteredId) {\n        indexWhichShouldBeDeleted = i;\n        break;\n      }\n    }\n    const updatedStudent = [...student];\n    updatedStudent.splice(indexWhichShouldBeDeleted, 1);\n    setStudent(updatedStudent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: people.map(student => /*#__PURE__*/_jsxDEV(StudentCard, {\n      onChange: StudentCardDeleteListener,\n      nameK: student.name,\n      passK: student.pass,\n      numberK: student.studentNum,\n      id: student.studentNum\n    }, student.studentNum, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6xkMPeCrlzs/QDtGA5pcE8ztMoM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["StudentCard","React","useState","jsxDEV","_jsxDEV","Node","constructor","element","next","LinkedList","head","size","add","node","current","people","name","studentNum","userName‌","pass","App","_s","student","setStudent","StudentCardDeleteListener","enteredId","console","log","indexWhichShouldBeDeleted","i","length","updatedStudent","splice","className","children","map","onChange","nameK","passK","numberK","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mehdi/Project-6/my-app/src/App.jsx"],"sourcesContent":["import './App.css';\nimport StudentCard from './StudentCards';\nimport React, { useState } from 'react';\n\n// User defined class node\nclass Node {\n  // constructor\n  constructor(element)\n  {\n      this.element = element;\n      this.next = null\n  }\n}\nclass LinkedList {\n  constructor()\n  {\n      this.head = null;\n      this.size = 0;\n  }\n\n  // functions to be implemented\n  // add(element)\n  \n  // insertAt(element, location)\n  // removeFrom(location)\n  // removeElement(element)\n\n  // Helper Methods\n  // isEmpty\n  // size_Of_List\n  // PrintList\n}\nadd(element)\n{\n    // creates a new node\n    let node = new Node(element);\n\n    // to store current node\n    let current;\n\n    // if list is Empty add the\n    // element and make it head\n    if (this.head == null)\n        this.head = node;\n    else {\n        current = this.head;\n\n        // iterate to the end of the\n        // list\n        while (current.next) {\n            current = current.next;\n        }\n\n        // add node\n        current.next = node;\n    }\n    this.size++;\n}\n\n\n\n\nconst people = [\n  {\n    name: 'Mahdi',\n    studentNum: \"401243051\",\n    userName‌: \"mm850\",\n    pass: 8596,\n  },\n  {\n    name: 'Fam',\n    studentNum: \"402258961\",\n    userName‌: \"mm350\",\n    pass: 1478,\n  },\n  {\n    name: 'Hadi',\n    studentNum: \"456256888\",\n    userName‌: \"mm350\",\n    pass: 1245,\n\n  },\n  {\n    name: 'Hadi',\n    studentNum: \"4566888\",\n    userName‌: \"mm350\",\n    pass: 1245,\n\n  },\n]\n\nfunction App() {\n\n  const [student, setStudent] = useState(people);\n  const StudentCardDeleteListener = (enteredId) => {\n    console.log(enteredId);\n    let indexWhichShouldBeDeleted = -1\n    for (let i = 0; i < student.length; i++) {\n      if (student[i].studentNum == enteredId) {\n        indexWhichShouldBeDeleted = i;\n        break;\n      }\n    }\n    const updatedStudent = [...student];\n    updatedStudent.splice(indexWhichShouldBeDeleted, 1)\n    setStudent(updatedStudent);\n  }\n\n  return (\n    <div className='container'>\n      {\n        people.map(student => (\n          <StudentCard\n            onChange={StudentCardDeleteListener}\n            nameK={student.name}\n            passK={student.pass}\n            numberK={student.studentNum}\n            id={student.studentNum}\n            key={student.studentNum}\n          />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}