{"ast":null,"code":"var _jsxFileName = \"/home/mehdi/Project-6/my-app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport StudentCard from './StudentCards';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst people = [{\n  name: 'Mahdi',\n  studentNum: \"401243051\",\n  userName‌: \"mm850\",\n  pass: 8596\n}, {\n  name: 'Fam',\n  studentNum: \"402258961\",\n  userName‌: \"mm350\",\n  pass: 1478\n}, {\n  name: 'Hadi',\n  studentNum: \"456256888\",\n  userName‌: \"mm350\",\n  pass: 1245\n}];\nfunction App() {\n  _s();\n  const [student, setStudent] = useState(people);\n  const StudentCardDeleteListener = enteredId => {\n    console.log(enteredId);\n\n    // Find the index of the student to be deleted\n    const indexToDelete = student.findIndex(s => s.studentNum === enteredId);\n    if (indexToDelete === -1) return; // If student not found, do nothing\n\n    // Create a new array without the student to delete\n    const updatedStudents = [...student.slice(0, indexToDelete), ...student.slice(indexToDelete + 1)];\n\n    // Update the state with the new array\n    setStudent(updatedStudents);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: people.map(student => /*#__PURE__*/_jsxDEV(StudentCard, {\n      onChange: StudentCardDeleteListener,\n      nameK: student.name,\n      passK: student.pass,\n      numberK: student.studentNum,\n      id: student.studentNum\n    }, student.studentNum, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6xkMPeCrlzs/QDtGA5pcE8ztMoM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["StudentCard","React","useState","jsxDEV","_jsxDEV","people","name","studentNum","userName‌","pass","App","_s","student","setStudent","StudentCardDeleteListener","enteredId","console","log","indexToDelete","findIndex","s","updatedStudents","slice","className","children","map","onChange","nameK","passK","numberK","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mehdi/Project-6/my-app/src/App.jsx"],"sourcesContent":["import './App.css';\nimport StudentCard from './StudentCards';\nimport React, { useState } from 'react';\n\n\nconst people = [\n  {\n    name: 'Mahdi',\n    studentNum: \"401243051\",\n    userName‌: \"mm850\",\n    pass: 8596,\n  },\n  {\n    name: 'Fam',\n    studentNum: \"402258961\",\n    userName‌: \"mm350\",\n    pass: 1478,\n  },\n  {\n    name: 'Hadi',\n    studentNum: \"456256888\",\n    userName‌: \"mm350\",\n    pass: 1245,\n\n  },\n]\n\nfunction App() {\n\n  const [student, setStudent] = useState(people);\n  const StudentCardDeleteListener = (enteredId) => {\n    console.log(enteredId);\n\n    // Find the index of the student to be deleted\n    const indexToDelete = student.findIndex(s => s.studentNum === enteredId);\n    if (indexToDelete === -1) return; // If student not found, do nothing\n\n    // Create a new array without the student to delete\n    const updatedStudents = [\n      ...student.slice(0, indexToDelete),\n      ...student.slice(indexToDelete + 1),\n    ];\n\n    // Update the state with the new array\n    setStudent(updatedStudents);\n  };\n\n  return (\n    <div className='container'>\n      {\n        people.map(student => (\n          <StudentCard\n            onChange={StudentCardDeleteListener}\n            nameK={student.name}\n            passK={student.pass}\n            numberK={student.studentNum}\n            id={student.studentNum}\n            key={student.studentNum}\n          />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,WAAW,MAAM,gBAAgB;AACxC,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE,WAAW;EACvBC,SAAS,EAAE,OAAO;EAClBC,IAAI,EAAE;AACR,CAAC,EACD;EACEH,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE,WAAW;EACvBC,SAAS,EAAE,OAAO;EAClBC,IAAI,EAAE;AACR,CAAC,EACD;EACEH,IAAI,EAAE,MAAM;EACZC,UAAU,EAAE,WAAW;EACvBC,SAAS,EAAE,OAAO;EAClBC,IAAI,EAAE;AAER,CAAC,CACF;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAACG,MAAM,CAAC;EAC9C,MAAMS,yBAAyB,GAAIC,SAAS,IAAK;IAC/CC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;;IAEtB;IACA,MAAMG,aAAa,GAAGN,OAAO,CAACO,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACb,UAAU,KAAKQ,SAAS,CAAC;IACxE,IAAIG,aAAa,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC;;IAElC;IACA,MAAMG,eAAe,GAAG,CACtB,GAAGT,OAAO,CAACU,KAAK,CAAC,CAAC,EAAEJ,aAAa,CAAC,EAClC,GAAGN,OAAO,CAACU,KAAK,CAACJ,aAAa,GAAG,CAAC,CAAC,CACpC;;IAED;IACAL,UAAU,CAACQ,eAAe,CAAC;EAC7B,CAAC;EAED,oBACEjB,OAAA;IAAKmB,SAAS,EAAC,WAAW;IAAAC,QAAA,EAEtBnB,MAAM,CAACoB,GAAG,CAACb,OAAO,iBAChBR,OAAA,CAACJ,WAAW;MACV0B,QAAQ,EAAEZ,yBAA0B;MACpCa,KAAK,EAAEf,OAAO,CAACN,IAAK;MACpBsB,KAAK,EAAEhB,OAAO,CAACH,IAAK;MACpBoB,OAAO,EAAEjB,OAAO,CAACL,UAAW;MAC5BuB,EAAE,EAAElB,OAAO,CAACL;IAAW,GAClBK,OAAO,CAACL,UAAU;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAED,CAAC;AAEV;AAACvB,EAAA,CApCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}