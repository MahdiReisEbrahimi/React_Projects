{"ast":null,"code":"var _jsxFileName = \"/home/mehdi/Project-6/my-app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport StudentCard from './StudentCards';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Node {\n  // constructor\n  constructor(name, studentNumber, userName, pass) {\n    this.name = name;\n    this.studentNumber = studentNumber;\n    this.userName = userName;\n    this.pass = pass;\n    this.next = null;\n  }\n}\n// linkedlist class\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.size = 0;\n  }\n\n  // adds an element at the end\n  // of list\n  add(name, studentNumber, userName, pass) {\n    // creates a new node\n    let node = new Node(element);\n\n    // to store current node\n    let current;\n\n    // if list is Empty add the\n    // element and make it head\n    if (this.head == null) this.head = node;else {\n      current = this.head;\n\n      // iterate to the end of the\n      // list\n      while (current.next) {\n        current = current.next;\n      }\n\n      // add node\n      current.next = node;\n    }\n    this.size++;\n  }\n\n  // insert element at the position index\n  // of the list\n  insertAt(element, index) {\n    if (index < 0 || index > this.size) return console.log(\"Please enter a valid index.\");else {\n      // creates a new node\n      let node = new Node(element);\n      let curr, prev;\n      curr = this.head;\n\n      // add the element to the\n      // first index\n      if (index == 0) {\n        node.next = this.head;\n        this.head = node;\n      } else {\n        curr = this.head;\n        let it = 0;\n\n        // iterate over the list to find\n        // the position to insert\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        }\n\n        // adding an element\n        node.next = curr;\n        prev.next = node;\n      }\n      this.size++;\n    }\n  }\n\n  // removes an element from the\n  // specified location\n  removeFrom(index) {\n    if (index < 0 || index >= this.size) return console.log(\"Please Enter a valid index\");else {\n      let curr,\n        prev,\n        it = 0;\n      curr = this.head;\n      prev = curr;\n\n      // deleting first element\n      if (index === 0) {\n        this.head = curr.next;\n      } else {\n        // iterate over the list to the\n        // position to remove an element\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        }\n\n        // remove the element\n        prev.next = curr.next;\n      }\n      this.size--;\n\n      // return the remove element\n      return curr.element;\n    }\n  }\n\n  // removes a given element from the\n  // list\n  removeElement(element) {\n    let current = this.head;\n    let prev = null;\n\n    // iterate over the list\n    while (current != null) {\n      // comparing element with current\n      // element if found then remove the\n      // and return true\n      if (current.element === element) {\n        if (prev == null) {\n          this.head = current.next;\n        } else {\n          prev.next = current.next;\n        }\n        this.size--;\n        return current.element;\n      }\n      prev = current;\n      current = current.next;\n    }\n    return -1;\n  }\n\n  // finds the index of element\n  indexOf(element) {\n    let count = 0;\n    let current = this.head;\n\n    // iterate over the list\n    while (current != null) {\n      // compare each element of the list\n      // with given element\n      if (current.element === element) return count;\n      count++;\n      current = current.next;\n    }\n\n    // not found\n    return -1;\n  }\n\n  // checks the list for empty\n  isEmpty() {\n    return this.size == 0;\n  }\n\n  // gives the size of the list\n  size_of_list() {\n    console.log(this.size);\n  }\n\n  // prints the list items\n  printList() {\n    let curr = this.head;\n    let str = \"\";\n    while (curr) {\n      str += curr.element + \" \";\n      curr = curr.next;\n    }\n    console.log(str);\n  }\n}\n\n// creating an object for the\n// Linkedlist class\nlet ll = new LinkedList();\nconst people = [{\n  name: 'Mahdi',\n  studentNum: \"401243051\",\n  userName‌: \"mm850\",\n  pass: 8596\n}, {\n  name: 'Fam',\n  studentNum: \"402258961\",\n  userName‌: \"mm350\",\n  pass: 1478\n}, {\n  name: 'Hadi',\n  studentNum: \"456256888\",\n  userName‌: \"mm350\",\n  pass: 1245\n}, {\n  name: 'Hadi',\n  studentNum: \"4566888\",\n  userName‌: \"mm350\",\n  pass: 1245\n}];\nfunction App() {\n  _s();\n  const [student, setStudent] = useState(people);\n  const StudentCardDeleteListener = enteredId => {\n    console.log(enteredId);\n    let indexWhichShouldBeDeleted = -1;\n    for (let i = 0; i < student.length; i++) {\n      if (student[i].studentNum == enteredId) {\n        indexWhichShouldBeDeleted = i;\n        break;\n      }\n    }\n    const updatedStudent = [...student];\n    updatedStudent.splice(indexWhichShouldBeDeleted, 1);\n    setStudent(updatedStudent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: people.map(student => /*#__PURE__*/_jsxDEV(StudentCard, {\n      onChange: StudentCardDeleteListener,\n      nameK: student.name,\n      passK: student.pass,\n      numberK: student.studentNum,\n      id: student.studentNum\n    }, student.studentNum, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6xkMPeCrlzs/QDtGA5pcE8ztMoM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["StudentCard","React","useState","jsxDEV","_jsxDEV","Node","constructor","name","studentNumber","userName","pass","next","LinkedList","head","size","add","node","element","current","insertAt","index","console","log","curr","prev","it","removeFrom","removeElement","indexOf","count","isEmpty","size_of_list","printList","str","ll","people","studentNum","userName‌","App","_s","student","setStudent","StudentCardDeleteListener","enteredId","indexWhichShouldBeDeleted","i","length","updatedStudent","splice","className","children","map","onChange","nameK","passK","numberK","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mehdi/Project-6/my-app/src/App.jsx"],"sourcesContent":["import './App.css';\nimport StudentCard from './StudentCards';\nimport React, { useState } from 'react';\n\nclass Node {\n  // constructor\n  constructor(name, studentNumber, userName , pass) {\n    this.name = name;\n    this.studentNumber = studentNumber;\n    this.userName = userName;\n    this.pass = pass;\n    this.next = null;\n  }\n}\n// linkedlist class\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.size = 0;\n  }\n\n  // adds an element at the end\n  // of list\n  add(name, studentNumber, userName , pass) {\n    // creates a new node\n    let node = new Node(element);\n\n    // to store current node\n    let current;\n\n    // if list is Empty add the\n    // element and make it head\n    if (this.head == null)\n      this.head = node;\n    else {\n      current = this.head;\n\n      // iterate to the end of the\n      // list\n      while (current.next) {\n        current = current.next;\n      }\n\n      // add node\n      current.next = node;\n    }\n    this.size++;\n  }\n\n  // insert element at the position index\n  // of the list\n  insertAt(element, index) {\n    if (index < 0 || index > this.size)\n      return console.log(\"Please enter a valid index.\");\n    else {\n      // creates a new node\n      let node = new Node(element);\n      let curr, prev;\n\n      curr = this.head;\n\n      // add the element to the\n      // first index\n      if (index == 0) {\n        node.next = this.head;\n        this.head = node;\n      } else {\n        curr = this.head;\n        let it = 0;\n\n        // iterate over the list to find\n        // the position to insert\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        }\n\n        // adding an element\n        node.next = curr;\n        prev.next = node;\n      }\n      this.size++;\n    }\n  }\n\n  // removes an element from the\n  // specified location\n  removeFrom(index) {\n    if (index < 0 || index >= this.size)\n      return console.log(\"Please Enter a valid index\");\n    else {\n      let curr, prev, it = 0;\n      curr = this.head;\n      prev = curr;\n\n      // deleting first element\n      if (index === 0) {\n        this.head = curr.next;\n      } else {\n        // iterate over the list to the\n        // position to remove an element\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        }\n\n        // remove the element\n        prev.next = curr.next;\n      }\n      this.size--;\n\n      // return the remove element\n      return curr.element;\n    }\n  }\n\n  // removes a given element from the\n  // list\n  removeElement(element) {\n    let current = this.head;\n    let prev = null;\n\n    // iterate over the list\n    while (current != null) {\n      // comparing element with current\n      // element if found then remove the\n      // and return true\n      if (current.element === element) {\n        if (prev == null) {\n          this.head = current.next;\n        } else {\n          prev.next = current.next;\n        }\n        this.size--;\n        return current.element;\n      }\n      prev = current;\n      current = current.next;\n    }\n    return -1;\n  }\n\n\n  // finds the index of element\n  indexOf(element) {\n    let count = 0;\n    let current = this.head;\n\n    // iterate over the list\n    while (current != null) {\n      // compare each element of the list\n      // with given element\n      if (current.element === element)\n        return count;\n      count++;\n      current = current.next;\n    }\n\n    // not found\n    return -1;\n  }\n\n  // checks the list for empty\n  isEmpty() {\n    return this.size == 0;\n  }\n\n  // gives the size of the list\n  size_of_list() {\n    console.log(this.size);\n  }\n\n\n  // prints the list items\n  printList() {\n    let curr = this.head;\n    let str = \"\";\n    while (curr) {\n      str += curr.element + \" \";\n      curr = curr.next;\n    }\n    console.log(str);\n  }\n\n}\n\n// creating an object for the\n// Linkedlist class\nlet ll = new LinkedList();\n\n\n\n\n\nconst people = [\n  {\n    name: 'Mahdi',\n    studentNum: \"401243051\",\n    userName‌: \"mm850\",\n    pass: 8596,\n  },\n  {\n    name: 'Fam',\n    studentNum: \"402258961\",\n    userName‌: \"mm350\",\n    pass: 1478,\n  },\n  {\n    name: 'Hadi',\n    studentNum: \"456256888\",\n    userName‌: \"mm350\",\n    pass: 1245,\n\n  },\n  {\n    name: 'Hadi',\n    studentNum: \"4566888\",\n    userName‌: \"mm350\",\n    pass: 1245,\n\n  },\n]\n\nfunction App() {\n\n  const [student, setStudent] = useState(people);\n  const StudentCardDeleteListener = (enteredId) => {\n    console.log(enteredId);\n    let indexWhichShouldBeDeleted = -1\n    for (let i = 0; i < student.length; i++) {\n      if (student[i].studentNum == enteredId) {\n        indexWhichShouldBeDeleted = i;\n        break;\n      }\n    }\n    const updatedStudent = [...student];\n    updatedStudent.splice(indexWhichShouldBeDeleted, 1)\n    setStudent(updatedStudent);\n  }\n\n  return (\n    <div className='container'>\n      {\n        people.map(student => (\n          <StudentCard\n            onChange={StudentCardDeleteListener}\n            nameK={student.name}\n            passK={student.pass}\n            numberK={student.studentNum}\n            id={student.studentNum}\n            key={student.studentNum}\n          />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}