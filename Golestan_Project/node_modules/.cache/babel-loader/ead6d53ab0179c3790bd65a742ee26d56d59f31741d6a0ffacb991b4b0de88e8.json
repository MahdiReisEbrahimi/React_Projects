{"ast":null,"code":"var _jsxFileName = \"/home/mehdi/Project-6/my-app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport StudentCard from './StudentCards';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Node {\n  // constructor\n  constructor(element) {\n    this.element = element;\n    this.next = null;\n  }\n}\n// linkedlist class\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.size = 0;\n  }\n\n  // adds an element at the end\n  // of list\n  add(element) {\n    // creates a new node\n    let node = new Node(element);\n\n    // to store current node\n    let current;\n\n    // if list is Empty add the\n    // element and make it head\n    if (this.head == null) this.head = node;else {\n      current = this.head;\n\n      // iterate to the end of the\n      // list\n      while (current.next) {\n        current = current.next;\n      }\n\n      // add node\n      current.next = node;\n    }\n    this.size++;\n  }\n\n  // insert element at the position index\n  // of the list\n  insertAt(element, index) {\n    if (index < 0 || index > this.size) return console.log(\"Please enter a valid index.\");else {\n      // creates a new node\n      let node = new Node(element);\n      let curr, prev;\n      curr = this.head;\n\n      // add the element to the\n      // first index\n      if (index == 0) {\n        node.next = this.head;\n        this.head = node;\n      } else {\n        curr = this.head;\n        let it = 0;\n\n        // iterate over the list to find\n        // the position to insert\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        }\n\n        // adding an element\n        node.next = curr;\n        prev.next = node;\n      }\n      this.size++;\n    }\n  }\n\n  // removes an element from the\n  // specified location\n  removeFrom(index) {\n    if (index < 0 || index >= this.size) return console.log(\"Please Enter a valid index\");else {\n      let curr,\n        prev,\n        it = 0;\n      curr = this.head;\n      prev = curr;\n\n      // deleting first element\n      if (index === 0) {\n        this.head = curr.next;\n      } else {\n        // iterate over the list to the\n        // position to remove an element\n        while (it < index) {\n          it++;\n          prev = curr;\n          curr = curr.next;\n        }\n\n        // remove the element\n        prev.next = curr.next;\n      }\n      this.size--;\n\n      // return the remove element\n      return curr.element;\n    }\n  }\n\n  // removes a given element from the\n  // list\n  removeElement(element) {\n    let current = this.head;\n    let prev = null;\n\n    // iterate over the list\n    while (current != null) {\n      // comparing element with current\n      // element if found then remove the\n      // and return true\n      if (current.element === element) {\n        if (prev == null) {\n          this.head = current.next;\n        } else {\n          prev.next = current.next;\n        }\n        this.size--;\n        return current.element;\n      }\n      prev = current;\n      current = current.next;\n    }\n    return -1;\n  }\n\n  // finds the index of element\n  indexOf(element) {\n    let count = 0;\n    let current = this.head;\n\n    // iterate over the list\n    while (current != null) {\n      // compare each element of the list\n      // with given element\n      if (current.element === element) return count;\n      count++;\n      current = current.next;\n    }\n\n    // not found\n    return -1;\n  }\n\n  // checks the list for empty\n  isEmpty() {\n    return this.size == 0;\n  }\n\n  // gives the size of the list\n  size_of_list() {\n    console.log(this.size);\n  }\n\n  // prints the list items\n  printList() {\n    let curr = this.head;\n    let str = \"\";\n    while (curr) {\n      str += curr.element + \" \";\n      curr = curr.next;\n    }\n    console.log(str);\n  }\n}\n\n// creating an object for the\n// Linkedlist class\nlet ll = new LinkedList();\nconst people = [{\n  name: 'Mahdi',\n  studentNum: \"401243051\",\n  userName‌: \"mm850\",\n  pass: 8596\n}, {\n  name: 'Fam',\n  studentNum: \"402258961\",\n  userName‌: \"mm350\",\n  pass: 1478\n}, {\n  name: 'Hadi',\n  studentNum: \"456256888\",\n  userName‌: \"mm350\",\n  pass: 1245\n}, {\n  name: 'Hadi',\n  studentNum: \"4566888\",\n  userName‌: \"mm350\",\n  pass: 1245\n}];\nfunction App() {\n  _s();\n  const [student, setStudent] = useState(people);\n  const StudentCardDeleteListener = enteredId => {\n    console.log(enteredId);\n    let indexWhichShouldBeDeleted = -1;\n    for (let i = 0; i < student.length; i++) {\n      if (student[i].studentNum == enteredId) {\n        indexWhichShouldBeDeleted = i;\n        break;\n      }\n    }\n    const updatedStudent = [...student];\n    updatedStudent.splice(indexWhichShouldBeDeleted, 1);\n    setStudent(updatedStudent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: people.map(student => /*#__PURE__*/_jsxDEV(StudentCard, {\n      onChange: StudentCardDeleteListener,\n      nameK: student.name,\n      passK: student.pass,\n      numberK: student.studentNum,\n      id: student.studentNum\n    }, student.studentNum, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6xkMPeCrlzs/QDtGA5pcE8ztMoM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["StudentCard","React","useState","jsxDEV","_jsxDEV","Node","constructor","element","next","LinkedList","head","size","add","node","current","insertAt","index","console","log","curr","prev","it","removeFrom","removeElement","indexOf","count","isEmpty","size_of_list","printList","str","ll","people","name","studentNum","userName‌","pass","App","_s","student","setStudent","StudentCardDeleteListener","enteredId","indexWhichShouldBeDeleted","i","length","updatedStudent","splice","className","children","map","onChange","nameK","passK","numberK","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mehdi/Project-6/my-app/src/App.jsx"],"sourcesContent":["import './App.css';\nimport StudentCard from './StudentCards';\nimport React, { useState } from 'react';\n\nclass Node {\n  // constructor\n  constructor(element) {\n      this.element = element;\n      this.next = null\n  }\n}\n// linkedlist class\nclass LinkedList {\n  constructor() {\n      this.head = null;\n      this.size = 0;\n  }\n\n  // adds an element at the end\n  // of list\n  add(element) {\n      // creates a new node\n      let node = new Node(element);\n\n      // to store current node\n      let current;\n\n      // if list is Empty add the\n      // element and make it head\n      if (this.head == null)\n          this.head = node;\n      else {\n          current = this.head;\n\n          // iterate to the end of the\n          // list\n          while (current.next) {\n              current = current.next;\n          }\n\n          // add node\n          current.next = node;\n      }\n      this.size++;\n  }\n\n  // insert element at the position index\n  // of the list\n  insertAt(element, index) {\n      if (index < 0 || index > this.size)\n          return console.log(\"Please enter a valid index.\");\n      else {\n          // creates a new node\n          let node = new Node(element);\n          let curr, prev;\n\n          curr = this.head;\n\n          // add the element to the\n          // first index\n          if (index == 0) {\n              node.next = this.head;\n              this.head = node;\n          } else {\n              curr = this.head;\n              let it = 0;\n\n              // iterate over the list to find\n              // the position to insert\n              while (it < index) {\n                  it++;\n                  prev = curr;\n                  curr = curr.next;\n              }\n\n              // adding an element\n              node.next = curr;\n              prev.next = node;\n          }\n          this.size++;\n      }\n  }\n\n  // removes an element from the\n  // specified location\n  removeFrom(index) {\n      if (index < 0 || index >= this.size)\n          return console.log(\"Please Enter a valid index\");\n      else {\n          let curr, prev, it = 0;\n          curr = this.head;\n          prev = curr;\n\n          // deleting first element\n          if (index === 0) {\n              this.head = curr.next;\n          } else {\n              // iterate over the list to the\n              // position to remove an element\n              while (it < index) {\n                  it++;\n                  prev = curr;\n                  curr = curr.next;\n              }\n\n              // remove the element\n              prev.next = curr.next;\n          }\n          this.size--;\n\n          // return the remove element\n          return curr.element;\n      }\n  }\n\n  // removes a given element from the\n  // list\n  removeElement(element) {\n      let current = this.head;\n      let prev = null;\n\n      // iterate over the list\n      while (current != null) {\n          // comparing element with current\n          // element if found then remove the\n          // and return true\n          if (current.element === element) {\n              if (prev == null) {\n                  this.head = current.next;\n              } else {\n                  prev.next = current.next;\n              }\n              this.size--;\n              return current.element;\n          }\n          prev = current;\n          current = current.next;\n      }\n      return -1;\n  }\n\n\n  // finds the index of element\n  indexOf(element) {\n      let count = 0;\n      let current = this.head;\n\n      // iterate over the list\n      while (current != null) {\n          // compare each element of the list\n          // with given element\n          if (current.element === element)\n              return count;\n          count++;\n          current = current.next;\n      }\n\n      // not found\n      return -1;\n  }\n\n  // checks the list for empty\n  isEmpty() {\n      return this.size == 0;\n  }\n\n  // gives the size of the list\n  size_of_list() {\n      console.log(this.size);\n  }\n\n\n  // prints the list items\n  printList() {\n      let curr = this.head;\n      let str = \"\";\n      while (curr) {\n          str += curr.element + \" \";\n          curr = curr.next;\n      }\n      console.log(str);\n  }\n\n}\n\n// creating an object for the\n// Linkedlist class\nlet ll = new LinkedList();\n\n\n\n\n\nconst people = [\n  {\n    name: 'Mahdi',\n    studentNum: \"401243051\",\n    userName‌: \"mm850\",\n    pass: 8596,\n  },\n  {\n    name: 'Fam',\n    studentNum: \"402258961\",\n    userName‌: \"mm350\",\n    pass: 1478,\n  },\n  {\n    name: 'Hadi',\n    studentNum: \"456256888\",\n    userName‌: \"mm350\",\n    pass: 1245,\n\n  },\n  {\n    name: 'Hadi',\n    studentNum: \"4566888\",\n    userName‌: \"mm350\",\n    pass: 1245,\n\n  },\n]\n\nfunction App() {\n\n  const [student, setStudent] = useState(people);\n  const StudentCardDeleteListener = (enteredId) => {\n    console.log(enteredId);\n    let indexWhichShouldBeDeleted = -1\n    for (let i = 0; i < student.length; i++) {\n      if (student[i].studentNum == enteredId) {\n        indexWhichShouldBeDeleted = i;\n        break;\n      }\n    }\n    const updatedStudent = [...student];\n    updatedStudent.splice(indexWhichShouldBeDeleted, 1)\n    setStudent(updatedStudent);\n  }\n\n  return (\n    <div className='container'>\n      {\n        people.map(student => (\n          <StudentCard\n            onChange={StudentCardDeleteListener}\n            nameK={student.name}\n            passK={student.pass}\n            numberK={student.studentNum}\n            id={student.studentNum}\n            key={student.studentNum}\n          />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}